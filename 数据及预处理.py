# -*- coding: utf-8 -*-
"""Untitled11.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bSYydjcmYlflr37M7Jj330iL-QZ6XikK
"""

import os
import torch
import torchvision
import torchvision.transforms as transforms
import numpy as np
import matplotlib.pyplot as plt

def load_mnist_data(batch_size=64, augment=True, data_dir='./mnist_data'):
    """
    加载MNIST数据集并进行预处理

    参数:
    batch_size (int): 每个batch的大小
    augment (bool): 是否使用数据增强
    data_dir (str): 存放MNIST文件的目录路径

    返回:
    train_loader (DataLoader): 训练集数据加载器
    test_loader (DataLoader): 测试集数据加载器
    """

    # 确保数据目录存在
    os.makedirs(data_dir, exist_ok=True)

    # 基础预处理：转换为Tensor并标准化
    base_transforms = [
        transforms.ToTensor(),
        transforms.Normalize((0.1307,), (0.3081,))
    ]

    # 数据增强转换
    augment_transforms = []
    if augment:
        augment_transforms = [
            transforms.RandomRotation(10),
            transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),
            transforms.ColorJitter(brightness=0.2, contrast=0.2)
        ]

    # 组合转换
    train_transforms = transforms.Compose(augment_transforms + base_transforms)
    test_transforms = transforms.Compose(base_transforms)

    # 检查本地文件是否存在
    required_files = [
        'train-images-idx3-ubyte',
        'train-labels-idx1-ubyte',
        't10k-images-idx3-ubyte',
        't10k-labels-idx1-ubyte'
    ]

    # 检查是否所有文件都存在
    files_exist = all(os.path.exists(os.path.join(data_dir, f)) for f in required_files)

    # 从本地文件加载数据集（如果存在），否则下载
    try:
        train_set = torchvision.datasets.MNIST(
            root=data_dir,
            train=True,
            download=not files_exist,  # 如果文件不存在则下载
            transform=train_transforms
        )

        test_set = torchvision.datasets.MNIST(
            root=data_dir,
            train=False,
            download=not files_exist,  # 如果文件不存在则下载
            transform=test_transforms
        )
    except Exception as e:
        print(f"加载数据集时出错: {e}")
        print("尝试使用PyTorch默认下载源...")
        # 使用默认下载源
        train_set = torchvision.datasets.MNIST(
            root=data_dir,
            train=True,
            download=True,
            transform=train_transforms
        )

        test_set = torchvision.datasets.MNIST(
            root=data_dir,
            train=False,
            download=True,
            transform=test_transforms
        )

    # 创建数据加载器
    train_loader = torch.utils.data.DataLoader(
        train_set,
        batch_size=batch_size,
        shuffle=True,
        num_workers=2,
        pin_memory=True
    )

    test_loader = torch.utils.data.DataLoader(
        test_set,
        batch_size=batch_size,
        shuffle=False,
        num_workers=2,
        pin_memory=True
    )

    print(f"训练集大小: {len(train_set)} 样本")
    print(f"测试集大小: {len(test_set)} 样本")
    print(f"训练批次数量: {len(train_loader)} (批量大小={batch_size})")

    return train_loader, test_loader

# 示例用法
if __name__ == "__main__":
    # 设置数据目录
    data_directory = './mnist_data'  # 更改为您存放MNIST文件的路径

    # 加载数据
    train_loader, test_loader = load_mnist_data(
        batch_size=64,
        augment=True,
        data_dir=data_directory
    )

    # 可视化函数
    def imshow(img):
        img = img * 0.3081 + 0.1307  # 反标准化
        npimg = img.numpy()
        plt.imshow(np.transpose(npimg, (1, 2, 0)), cmap='gray')
        plt.axis('off')
        plt.show()

    # 显示训练样本
    print("\n训练样本示例:")
    train_iter = iter(train_loader)
    images, labels = next(train_iter)
    imshow(torchvision.utils.make_grid(images[:8]))
    print('标签:', labels[:8].numpy())

    # 显示测试样本
    print("\n测试样本示例:")
    test_iter = iter(test_loader)
    test_images, test_labels = next(test_iter)
    imshow(torchvision.utils.make_grid(test_images[:8]))
    print('标签:', test_labels[:8].numpy())

    # 检查数据形状
    print("\n数据形状检查:")
    print(f"训练图像形状: {images.shape}")  # 应为 [batch_size, 1, 28, 28]
    print(f"训练标签形状: {labels.shape}")  # 应为 [batch_size]

    # 检查数据范围
    print(f"图像最小值: {images.min().item():.4f}, 最大值: {images.max().item():.4f}")
    print(f"图像均值: {images.mean().item():.4f}, 标准差: {images.std().item():.4f}")

    # 统计信息
    unique_labels = torch.unique(labels)
    print(f"批次中包含的标签: {unique_labels.numpy()}")