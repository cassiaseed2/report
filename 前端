import os
import torch
import torch.nn as nn
import torch.nn.functional as F
from torchvision import transforms
from PIL import Image
from flask import Flask, render_template, request, jsonify
import io
import numpy as np

app = Flask(__name__)

# 定义与训练一致的CNN模型
class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, kernel_size=3)
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3)
        self.conv2_drop = nn.Dropout2d()
        self.fc1 = nn.Linear(3136, 128)  # 3136 = 64 * 7 * 7
        self.fc2 = nn.Linear(128, 10)

    def forward(self, x):
        x = F.relu(F.max_pool2d(self.conv1(x), 2))
        x = F.relu(F.max_pool2d(self.conv2_drop(self.conv2(x)), 2))
        x = x.view(-1, 3136)
        x = F.relu(self.fc1(x))
        x = F.dropout(x, training=self.training)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)

# 加载模型
model = Net()
checkpoint = torch.load('/workspace/best_model.pth', map_location=torch.device('cpu'))
model.load_state_dict(checkpoint['model_state_dict'])
model.eval()

# 图像预处理
transform = transforms.Compose([
    transforms.Resize((28, 28)),
    transforms.ToTensor(),
    transforms.Normalize((0.1307,), (0.3081,))
])

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    if request.method == 'POST':
        # 获取画布图像数据
        img_data = request.get_data()
        img = Image.open(io.BytesIO(img_data)).convert('L')
        
        # 预处理图像
        img = img.resize((28, 28))
        img = transform(img).unsqueeze(0)
        
        # 进行预测
        with torch.no_grad():
            output = model(img)
            pred = output.argmax(dim=1, keepdim=True).item()
            probabilities = F.softmax(output, dim=1).squeeze().tolist()
        
        return jsonify({
            'prediction': pred,
            'probabilities': probabilities
        })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
